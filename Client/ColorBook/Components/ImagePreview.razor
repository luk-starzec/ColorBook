@inject IJSRuntime JS

<section class="image-preview__wrapper">

    <img class="image-preview__image" id="@_imageId" src="@imageDataUrl"
         @onmousemove="OnMouseMove" @onmousedown="OnMouseDown" @onmouseover="OnMouseOver" @onmouseout="OnMouseOut" @onmousemove:stopPropagation="true"
         @ontouchmove="OnTouchMove" @ontouchstart="OnTouchStart" @ontouchend="OnTouchEnd" @ontouchmove:stopPropagation="true" />

    <canvas class="@cssDetails" style="@styleDetails" id="@_detailsCanvasId"></canvas>

    <div class="image-preview__footer">

        <div class="image-preview__options">

            <button class="@cssTracking" @onclick="ChangeTracking" title="tracking color under cursor">
                <img src="/assets/track-icon.svg" />
            </button>
        </div>

    </div>

</section>

@code {
    [Parameter]
    public string ColorHex { get; set; }
    [Parameter]
    public EventCallback<string> ColorHexChanged { get; set; }

    IBrowserFile file;
    [Parameter]
    public IBrowserFile File
    {
        get => file;
        set => SetFile(value);
    }

    readonly int _detailsScale = 4;
    readonly string _imageId = "imageId";
    readonly string _detailsCanvasId = "previewId";

    string imageDataUrl;

    bool isImageLoaded => imageDataUrl != null;

    bool isMouseOver = false;

    string cssDetails => isImageLoaded && isMouseOver ? "image-preview__details-view" : "image-preview__details-view image-preview__details-view--hidden";
    int detailsOffset = 0;
    string styleDetails => $"--offset: {detailsOffset}px;";

    bool isTracking = false;
    string cssTracking => isTracking ? "image-preview__option image-preview__option--active" : "image-preview__option";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("colorPreview.initPreview", _detailsCanvasId, _detailsScale);
    }

    void OnMouseOver(MouseEventArgs e) => isMouseOver = true;

    void OnMouseOut(MouseEventArgs e) => isMouseOver = false;

    async Task OnMouseDown(MouseEventArgs e)
    {
        await SetColor();
        if (isTracking)
            isTracking = false;
    }

    async Task OnMouseMove(MouseEventArgs e)
    {
        if (!isImageLoaded)
            return;

        await JS.InvokeVoidAsync("colorPreview.setPreview", _imageId, _detailsCanvasId, e.OffsetX, e.OffsetY, _detailsScale);

        if (isTracking)
            await SetColor();
    }

    void OnTouchStart(TouchEventArgs e) => isMouseOver = true;

    async Task OnTouchEnd(TouchEventArgs e)
    {
        isMouseOver = false;
        if (isTracking)
        {
            await SetColor();
            isTracking = false;
        }
    }

    async Task OnTouchMove(TouchEventArgs e)
    {
        var imageXY = await JS.InvokeAsync<int[]>("colorPreview.getElementXY", _imageId);
        var args = new MouseEventArgs
        {
            OffsetX = e.Touches[0].PageX - imageXY[0],
            OffsetY = e.Touches[0].PageY - imageXY[1],
        };
        await OnMouseMove(args);
    }

    async Task SetColor()
    {
        var rgba = await JS.InvokeAsync<int[]>("colorPreview.getRGBA", _detailsCanvasId);
        var hex = await JS.InvokeAsync<string>("colorPreview.rgbToHex", rgba[0], rgba[1], rgba[2]);

        ColorHex = hex;
        await ColorHexChanged.InvokeAsync(ColorHex);
    }

    void SetFile(IBrowserFile value)
    {
        if (file == value)
            return;
        file = value;
        InvokeAsync(SetImageData);
    }

    async Task SetImageData()
    {
        if (file == null)
        {
            imageDataUrl = null;
            return;
        }

        var width = await JS.InvokeAsync<int>("colorPreview.getWindowWidth");
        var height = await JS.InvokeAsync<int>("colorPreview.getWindowHeight");

        var maxWidth = width < 500 ? width : 500;
        var maxHeight = height < 700 ? height : 700; ;

        var format = "image/png";
        var resized = await file.RequestImageFileAsync(format, maxWidth, maxHeight);
        var buffer = new byte[resized.Size];
        await resized.OpenReadStream().ReadAsync(buffer);
        imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

        StateHasChanged();
    }

    void ChangeTracking() => isTracking = !isTracking;

}
