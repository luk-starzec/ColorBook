@inject IJSRuntime JS

<div class="color-bar__wrapper">

    @for (int i = 0; i <= 10; i++)
    {
        int index = i;
        <div class="color-bar__item">
            <div class="@GetColorCss(index)" style="background-color: @GetColorValue(index)" @onclick="()=>OnClick(index)"></div>
            <div class="@GetLabelCss(index)">@GetLabelText(index) </div>
        </div>
    }

</div>

@code {
    [Parameter]
    public string ColorHex { get; set; }
    [Parameter]
    public EventCallback<string> ColorHexChanged { get; set; }
    [Parameter]
    public EnumColorBarType ColorBarType { get; set; }

    int selectedColorIndex = -1;

    string[] colors = new string[11];

    int valueStep = 10;

    async Task OnClick(int index)
    {
        selectedColorIndex = index;
        ColorHex = colors[selectedColorIndex];
        await ColorHexChanged.InvokeAsync(ColorHex);
    }

    async Task SetColors()
    {
        var functionName = ColorBarType switch
        {
            EnumColorBarType.Hue => "colorTools.setHue",
            EnumColorBarType.Lightness => "colorTools.setLightness",
            EnumColorBarType.Saturation => "colorTools.setSaturation",
            _ => string.Empty
        };

        valueStep = ColorBarType == EnumColorBarType.Hue ? 32 : 10;

        selectedColorIndex = -1;

        for (int i = 0; i <= 10; i++)
        {
            colors[i] = await JS.InvokeAsync<string>(functionName, ColorHex, i * valueStep);

            if (colors[i].ToLower() == ColorHex.ToLower())
                selectedColorIndex = i;
        }
    }

    string GetColorValue(int index) => colors.Length > index ? colors[index] : string.Empty;
    string GetLabelText(int index) => ColorBarType != EnumColorBarType.Hue ? $"{index * valueStep}%" : string.Empty;

    string GetColorCss(int index) => $"color-bar__color{(index == selectedColorIndex ? " color-bar__color--selected" : "")}";
    string GetLabelCss(int index) => $"color-bar__label{(index == selectedColorIndex ? " color-bar__label--selected" : "")}";


    protected override async Task OnParametersSetAsync()
    {
        await SetColors();
    }

}
