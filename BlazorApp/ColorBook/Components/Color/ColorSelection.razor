
<div class="color-selection__wrapper">

    <button class="@cssPalette" @onclick="()=>ChangeSelectionType(EnumColorSelectionType.Palette)" title="select color from palette">
        <img src="/assets/palette-icon.svg" />
    </button>

    <label class="@cssImage" @onclick="()=>ChangeSelectionType(EnumColorSelectionType.Image)" title="select color from image">
        <img src="/assets/image-icon.svg" />
        <span>...</span>
        <InputFile class="color-selection__file-input" OnChange="@OnInputFileChange" accept="image/*" />
    </label>

</div>

@code {
    [Parameter]
    public EnumColorSelectionType ColorSelectionType { get; set; }
    [Parameter]
    public EventCallback<EnumColorSelectionType> ColorSelectionTypeChanged { get; set; }
    [Parameter]
    public IBrowserFile SelectedFile { get; set; }
    [Parameter]
    public EventCallback<IBrowserFile> SelectedFileChanged { get; set; }


    bool isFileButtonVisible => ColorSelectionType != EnumColorSelectionType.Palette;

    string cssPalette => ColorSelectionType == EnumColorSelectionType.Palette
        ? "color-selection__button color-selection__button--selected"
        : "color-selection__button";
    string cssImage => ColorSelectionType == EnumColorSelectionType.Image
        ? "color-selection__button color-selection__button--file color-selection__button--selected"
        : "color-selection__button color-selection__button--file";


    async Task ChangeSelectionType(EnumColorSelectionType selectionType)
    {
        ColorSelectionType = selectionType;
        await ColorSelectionTypeChanged.InvokeAsync(ColorSelectionType);

        if (ColorSelectionType == EnumColorSelectionType.Palette)
        {
            SelectedFile = null;
            await SelectedFileChanged.InvokeAsync(SelectedFile);
        }
    }

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        SelectedFile = e.File;
        await SelectedFileChanged.InvokeAsync(SelectedFile);
    }
}
