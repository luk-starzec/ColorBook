@inject IJSRuntime JS

<div class="image-preview__wrapper">

    <img class="image-preview__image" id="@imageId" src="@imageDataUrl"
         @onmousemove="OnMouseMove" @onmousedown="OnMouseDown" @onmouseover="OnMouseOver" @onmouseout="OnMouseOut" @onmousemove:stopPropagation="true" />

    <canvas class="@cssDetails" id="@previewCanvasId"></canvas>

</div>

@code {
    [Parameter]
    public bool IsTracking { get; set; }
    [Parameter]
    public EventCallback<bool> IsTrackingChanged { get; set; }
    [Parameter]
    public string ColorHex { get; set; }
    [Parameter]
    public EventCallback<string> ColorHexChanged { get; set; }

    IBrowserFile file;
    [Parameter]
    public IBrowserFile File
    {
        get => file;
        set
        {
            if (file == value)
                return;
            file = value;
            InvokeAsync(SetImageData);
        }
    }

    int previewScale = 4;
    string imageId = "imageId";
    string previewCanvasId = "previewId";

    string imageDataUrl;

    bool isImageLoaded => imageDataUrl != null;

    bool isMouseOver = false;

    string cssDetails => isImageLoaded && isMouseOver ? "image-preview__details-view" : "image-preview__details-view image-preview__details-view--hidden";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("colorPreview.initPreview", previewCanvasId, previewScale);
    }

    void OnMouseOver(MouseEventArgs e) => isMouseOver = true;

    void OnMouseOut(MouseEventArgs e) => isMouseOver = false;

    async Task OnMouseDown(MouseEventArgs e)
    {
        await SetColor();
        if (IsTracking)
            await IsTrackingChanged.InvokeAsync(false);
    }

    async Task OnMouseMove(MouseEventArgs e)
    {
        if (!isImageLoaded)
            return;

        await JS.InvokeVoidAsync("colorPreview.setPreview", imageId, previewCanvasId, e.OffsetX, e.OffsetY, previewScale);

        if (IsTracking)
            await SetColor();
    }

    async Task SetColor()
    {
        var rgba = await JS.InvokeAsync<int[]>("colorPreview.getRGBA", previewCanvasId);
        var hex = await JS.InvokeAsync<string>("colorPreview.rgbToHex", rgba[0], rgba[1], rgba[2]);

        ColorHex = hex;
        await ColorHexChanged.InvokeAsync(ColorHex);
    }

    async Task SetImageData()
    {
        if (file == null)
        {
            imageDataUrl = null;
            return;
        }

        var maxWidth = 400;
        var maxHeight = 400;

        var format = "image/png";
        var resized = await file.RequestImageFileAsync(format, maxWidth, maxHeight);
        var buffer = new byte[resized.Size];
        await resized.OpenReadStream().ReadAsync(buffer);
        imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

        StateHasChanged();
    }

}
