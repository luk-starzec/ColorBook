@inject IJSRuntime JS

<div class="image-preview__wrapper">

    <InputFile OnChange="@OnInputFileChange" accept="image/*" capture />

    <img class="image-preview__image" id="@imageId" src="@imageDataUrl" @onmousemove="@OnMouseMove" @onmousedown="@OnMouseDown" />

    <canvas class="@cssDetails" id="@previewCanvasId"></canvas>

    <div style="width: 50px; height: 50px; background: @colorHex;" />

</div>

@code {
    string colorHex { get; set; } = "#ff00ff";

    int previewScale = 4;
    string imageId = "testImg";
    string previewCanvasId = "preview";
    string imageDataUrl;
    bool isImageLoaded = false;

    string cssDetails => isImageLoaded ? "image-preview__details-view" : "image-preview__details-view image-preview__details-view--hidden";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await JS.InvokeVoidAsync("colorPreview.initPreview", previewCanvasId, previewScale);
    }

    async Task OnMouseDown(MouseEventArgs e)
    {
        Console.WriteLine($"x:{e.OffsetX}; y:{e.OffsetY}");
        await SetColor();
    }

    async Task OnMouseMove(MouseEventArgs e)
    {
        if (!isImageLoaded)
            return;

        await JS.InvokeVoidAsync("colorPreview.setPreview", imageId, previewCanvasId, e.OffsetX, e.OffsetY, previewScale);
    }

    async Task SetColor()
    {
        var rgba = await JS.InvokeAsync<int[]>("colorPreview.getRGBA", previewCanvasId);
        var hex = await JS.InvokeAsync<string>("colorPreview.rgbToHex", rgba[0], rgba[1], rgba[2]);

        colorHex = hex;
    }

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxWidth = 400;
        var maxHeight = 400;

        var image = e.File;
        var format = "image/png";
        var resized = await image.RequestImageFileAsync(format, maxWidth, maxHeight);
        var buffer = new byte[resized.Size];
        await resized.OpenReadStream().ReadAsync(buffer);
        imageDataUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        isImageLoaded = true;
    }

}
