@implements IDisposable
@inject ISettingsService settingsService
@inject ISyncService syncService

<div class="settings-menu__settings-wrapper">

    <h4 class="settings-menu__sub-header">
        Background sample
    </h4>

    <SettingsColor SettingsColorType="@EnumSettingsColorType.LightBackground"
                   Label="light:" ColorHex="@currentSettings.LightBackgroundColor" ColorPickerOpened="OpenColorPicker" />
    <SettingsColor SettingsColorType="@EnumSettingsColorType.DarkBackground"
                   Label="dark:" ColorHex="@currentSettings.DarkBackgroundColor" ColorPickerOpened="OpenColorPicker" />

    <h4 class="settings-menu__sub-header">
        Text sample
    </h4>

    <SettingsColor SettingsColorType="@EnumSettingsColorType.LightText"
                   Label="light:" ColorHex="@currentSettings.LightTextColor" ColorPickerOpened="OpenColorPicker" />
    <SettingsColor SettingsColorType="@EnumSettingsColorType.DarkText"
                   Label="dark:" ColorHex="@currentSettings.DarkTextColor" ColorPickerOpened="OpenColorPicker" />

    <h4 class="settings-menu__sub-header">
        Server copy
    </h4>

    <label class="settings-menu__checkbox">
        <input type="checkbox" @bind="currentSettings.AutoSync" @onclick="AutoSyncClick" />
        auto synchronize
    </label>

    @if (isSyncAvailable)
    {
        <button class="settings-menu__button settings-menu__button--push" @onclick="PushToServer">
            <img src="/assets/push-icon.svg" />
            <span>Push to server</span>
        </button>

        <button class="settings-menu__button" @onclick="PullFromServer">
            <img src="/assets/pull-icon.svg" />
            <span>Pull from server</span>
        </button>
    }

    <div class="settings-menu__spacer"></div>

    <button class="settings-menu__button" @onclick="RestoreDefaults">
        <img src="/assets/restore-icon.svg" />
        <span>Restore defaults</span>
    </button>

</div>

@code {
    [Parameter]
    public EventCallback<string> ColorPickerOpen { get; set; }
    public async Task ColorPickerClosed(string color) => await ClosedColorPicker(color);

    bool isSyncAvailable;

    Settings currentSettings;

    EnumSettingsColorType settingsColorType;

    protected override async Task OnInitializedAsync()
    {
        currentSettings = await settingsService.GetCurrentSettingsAsync();
        settingsService.CurrentSettingsChanged += SetCurrentSettings;
        isSyncAvailable = await syncService.GetSyncAvailabilityAsync();
    }

    void SetCurrentSettings(Settings newSettings)
    {
        currentSettings = newSettings;
        StateHasChanged();
    }

    async Task AutoSyncClick()
    {
        currentSettings.AutoSync = !currentSettings.AutoSync;
        await settingsService.SaveSettingsAsync(currentSettings);
    }

    async Task PullFromServer()
    {
        await settingsService.PullSettingsFromServer();
        currentSettings = await settingsService.GetCurrentSettingsAsync();
    }

    async Task PushToServer()
    {
        await settingsService.PushSettingsToServer();
    }

    async Task RestoreDefaults()
    {
        await settingsService.RestoreDefaultSettings();
        currentSettings = await settingsService.GetCurrentSettingsAsync();
    }

    void OpenColorPicker(EnumSettingsColorType colorType)
    {
        settingsColorType = colorType;
        var color = GetSettingsColor(colorType);
        ColorPickerOpen.InvokeAsync(color);
    }

    async Task ClosedColorPicker(string color)
    {
        SetSettingsColor(settingsColorType, color);
        await settingsService.SaveSettingsAsync(currentSettings);
    }

    string GetSettingsColor(EnumSettingsColorType settingsColorType)
    {
        return settingsColorType switch
        {
            EnumSettingsColorType.LightBackground => currentSettings.LightBackgroundColor,
            EnumSettingsColorType.DarkBackground => currentSettings.DarkBackgroundColor,
            EnumSettingsColorType.LightText => currentSettings.LightTextColor,
            EnumSettingsColorType.DarkText => currentSettings.DarkTextColor,
            _ => string.Empty,
        };
    }
    void SetSettingsColor(EnumSettingsColorType settingsColorType, string color)
    {
        switch (settingsColorType)
        {
            case EnumSettingsColorType.LightBackground:
                currentSettings.LightBackgroundColor = color;
                break;
            case EnumSettingsColorType.DarkBackground:
                currentSettings.DarkBackgroundColor = color;
                break;
            case EnumSettingsColorType.LightText:
                currentSettings.LightTextColor = color;
                break;
            case EnumSettingsColorType.DarkText:
                currentSettings.DarkTextColor = color;
                break;
            default:
                break;
        }
    }


    void IDisposable.Dispose()
    {
        settingsService.CurrentSettingsChanged -= SetCurrentSettings;
    }
}
