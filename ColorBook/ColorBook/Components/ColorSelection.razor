
<div class="color-selection__wrapper">

    <div class="color-selection__type-wrapper">

        <button class="@cssTypeButton" title="@GetTitle(colorSelectionType)" @onclick="ChangeListVisibility">
            <img src="@GetImageSrc(colorSelectionType)" alt="@GetTitle(colorSelectionType)" />
        </button>

        @if (isListVisible)
        {
            <ul class="color-selection__list">
                @{ foreach (EnumColorSelectionType type in Enum.GetValues(typeof(EnumColorSelectionType)))
                    {
                        <li class="color-selection__list-item">
                            <button class="color-selection__list-button" @onclick="()=>ChangeSelectionType(type)">
                                <img src="@GetImageSrc(type)" />
                                @GetTitle(type)
                            </button>
                        </li>
                    }
                }
            </ul>
        }

    </div>

    @if (isFileButtonVisible)
    {
        <div class="color-selection__file-wrapper">
            <label class="color-selection__file-label" title="@GetTitleFile(colorSelectionType)">
                ...
                <input class="color-selection__file-input" type="file" />
            </label>
        </div>
    }

    <div class="@cssMask" @onclick="HideList">
    </div>

</div>

@code {

    EnumColorSelectionType colorSelectionType = EnumColorSelectionType.Palette;

    bool isListVisible = false;

    bool isFileButtonVisible => colorSelectionType != EnumColorSelectionType.Palette;

    string cssTypeButton
    {
        get
        {
            var css = "color-selection__type-button";
            if (isListVisible)
                css += " color-selection__type-button--list";
            if (isFileButtonVisible)
                css += " color-selection__type-button--file";
            return css;
        }
    }

    string cssMask => isListVisible ? "color-selection__list-mask color-selection__list-mask--visible" : "color-selection__list-mask";

    string GetTitle(EnumColorSelectionType selectionType)
    {
        return selectionType switch
        {
            EnumColorSelectionType.Palette => "from palette",
            EnumColorSelectionType.Image => "from image",
            EnumColorSelectionType.Camera => "from camera",
            _ => string.Empty,
        };
    }

    string GetTitleFile(EnumColorSelectionType selectionType) => selectionType == EnumColorSelectionType.Camera ? "open camera" : "open file";

    string GetImageSrc(EnumColorSelectionType selectionType)
    {
        var fileName = selectionType switch
        {
            EnumColorSelectionType.Palette => "palette-icon",
            EnumColorSelectionType.Image => "image-icon",
            EnumColorSelectionType.Camera => "camera-icon",
            _ => string.Empty,
        };
        return $"/assets/{fileName}.svg";
    }

    void ChangeListVisibility() => isListVisible = !isListVisible;

    void HideList() => isListVisible = false;

    void ChangeSelectionType(EnumColorSelectionType selectionType)
    {
        colorSelectionType = selectionType;
        isListVisible = false;
    }
}
