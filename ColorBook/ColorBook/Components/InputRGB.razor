@inject IJSRuntime JS

<div class="input-rgb__wrapper">

    <label class="input-rgb__label">
        <span>RGB:</span>
        <input type="number" @bind="@R" @bind:event="oninput" min="0" max="255" class="input-rgb__input" />
        <input type="number" @bind="@G" @bind:event="oninput" min="0" max="255" class="input-rgb__input input-rgb__input--no-side-border" />
        <input type="number" @bind="@B" @bind:event="oninput" min="0" max="255" class="input-rgb__input" />
    </label>

    <ButtonCopy Text="@rgb" />

</div>


@code {
    [Parameter]
    public string Value { get; set; }
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    int r;
    private int R
    {
        get => r;
        set { r = value; InvokeAsync(SetValue); }
    }

    int g;
    private int G
    {
        get => g;
        set { g = value; InvokeAsync(SetValue); }
    }

    int b;
    private int B
    {
        get => b;
        set { b = value; InvokeAsync(SetValue); }
    }

    string rgb => $"rgb({R},{G},{B})";


    protected override async Task OnParametersSetAsync()
    {
        await SetRGB();
    }


    private async Task SetValue()
    {
        Value = await JS.InvokeAsync<string>("colorTools.rgbToHex", R, G, B);
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task SetRGB()
    {
        r = await JS.InvokeAsync<int>("colorTools.getRed", Value);
        g = await JS.InvokeAsync<int>("colorTools.getGreen", Value);
        b = await JS.InvokeAsync<int>("colorTools.getBlue", Value);
    }
}
