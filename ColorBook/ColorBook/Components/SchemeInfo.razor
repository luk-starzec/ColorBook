
<div class="scheme-info__wrapper">

    @if (Scheme == null)
    {
        <div>
            Loading...
        </div>
    }
    else
    {
        <SchemeHeader @bind-Name="Scheme.Name" ColorHex="@(Scheme.GetColor(0).ColorHex)" OnGenerateColors="AddGeneratedColors" OnClearColors="ClearSchemeColors" />

        <SchemeColors Scheme="Scheme" @bind-SelectedIndex="SelectedIndex" />

        <SchemeDescription Scheme="Scheme" @bind-SelectedIndex="SelectedIndex" />

        <SchemeFooter Scheme="Scheme" />
    }

</div>

@code {
    ColorScheme scheme;
    [Parameter]
    public ColorScheme Scheme
    {
        get => scheme;
        set
        {
            if (scheme == value)
                return;
            scheme = value;
            SelectedIndex = null;
        }
    }
    [Parameter]
    public string SelectedColor
    {
        get => GetSelectedColor();
        set => SetSelectedColor(value);
    }
    [Parameter]
    public EventCallback<string> SelectedColorChanged { get; set; }


    int? selectedIndex = null;
    int? SelectedIndex
    {
        get => selectedIndex;
        set
        {
            if (selectedIndex == value)
                return;
            selectedIndex = value;
            SelectedColorChanged.InvokeAsync(GetSelectedColor());
        }
    }


    void SetSelectedColor(string colorHex)
    {
        if (SelectedIndex.HasValue && Scheme.Colors.Count() > selectedIndex)
            Scheme.GetColor(SelectedIndex.Value).ColorHex = colorHex;
    }
    string GetSelectedColor()
    {
        return SelectedIndex.HasValue ? Scheme.GetColor(selectedIndex.Value).ColorHex : null;
    }

    void AddGeneratedColors(string[] newColors)
    {
        SelectedIndex = 0;

        var namedColors = newColors.Select(r => new NamedColor(r));

        Scheme.RemoveColor(0);
        Scheme.InsertColors(0, namedColors);
    }

    void ClearSchemeColors()
    {
        SelectedIndex = null;
        Scheme.Colors = new List<NamedColor> { Scheme.GetColor(0) };
    }

}
