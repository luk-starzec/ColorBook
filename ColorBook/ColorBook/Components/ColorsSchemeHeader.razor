@inject IJSRuntime JS

<div class="colors-scheme-header__wrapper">

    <h3 class="colors-scheme-header__title">COLORS SCHEME</h3>

    <div class="colors-scheme-header__list-wrapper">

        <button class="@cssSchemesButton" @onclick="ChangeListVisibility" title="generate color scheme">
            @if (isListVisible)
            {
                <img src="/assets/close-icon.svg" />
            }
            else
            {
                <img src="/assets/color-wheel-icon.svg" />
            }
        </button>

        @if (isListVisible)
        {
            <ul class="colors-scheme-header__list">

                <li class="colors-scheme-header__list-item colors-scheme-header__list-item--info">
                    Based on
                    <div class="colors-scheme-header__color-sample" style="background-color: @ColorHex"></div>
                    generate colors:
                </li>

                @foreach (var scheme in schemes)
                {
                    <li class="colors-scheme-header__list-item colors-scheme-header__list-item--selectable" @onclick="() => GenerateScheme(scheme.Method)">
                        @scheme.Name
                    </li>
                }
            </ul>
        }
    </div>

    <div class="colors-scheme-header__list-wrapper">

        <button class="@cssRemoveButton" @onclick="ChangeQuestionVisibility" title="remove colors from scheme">
            @if (isQuestionVisible)
            {
                <img src="/assets/close-icon.svg" />
            }
            else
            {
                <img src="/assets/delete-all-icon.svg" />
            }
        </button>

        @if (isQuestionVisible)
        {
            <ul class="colors-scheme-header__list">

                <li class="colors-scheme-header__list-item colors-scheme-header__list-item--info">
                    Do you want to remove all colors from current scheme?
                </li>

                <li class="colors-scheme-header__list-item colors-scheme-header__list-item--selectable colors-scheme-header__list-item--centered" @onclick="RemoveColors">Yes</li>
                <li class="colors-scheme-header__list-item colors-scheme-header__list-item--selectable colors-scheme-header__list-item--centered" @onclick="ChangeQuestionVisibility">Cancel</li>

            </ul>

        }
    </div>

    <div class="@cssMask" @onclick="HideMask">
    </div>

</div>

@code {
    [Parameter]
    public string ColorHex { get; set; }
    [Parameter]
    public Action<string[]> AddGeneratedColors { get; set; }
    [Parameter]
    public Action ClearSchemeColors { get; set; }

    SchemeType[] schemes;

    bool isListVisible;
    bool isQuestionVisible;

    string cssSchemesButton => isListVisible ? "colors-scheme-header__button colors-scheme-header__button--list" : "colors-scheme-header__button";
    string cssRemoveButton => isQuestionVisible ? "colors-scheme-header__button colors-scheme-header__button--list" : "colors-scheme-header__button";
    string cssMask => isListVisible || isQuestionVisible ? "colors-scheme-header__list-mask colors-scheme-header__list-mask--visible" : "colors-scheme-header__list-mask";


    protected override async Task OnInitializedAsync()
    {
        schemes = await JS.InvokeAsync<SchemeType[]>("ColorLib.getSchemeTypes");
    }


    void ChangeListVisibility()
    {
        isListVisible = !isListVisible;
        if (isListVisible)
            isQuestionVisible = false;
    }

    void ChangeQuestionVisibility()
    {
        isQuestionVisible = !isQuestionVisible;
        if (isQuestionVisible)
            isListVisible = false;
    }

    void HideMask()
    {
        isListVisible = false;
        isQuestionVisible = false;
    }

    async Task GenerateScheme(string method)
    {
        var colors = await JS.InvokeAsync<string[]>("ColorLib.generateScheme", ColorHex, method);
        AddGeneratedColors?.Invoke(colors);
        isListVisible = false;
    }

    void RemoveColors()
    {
        ClearSchemeColors?.Invoke();
        isQuestionVisible = false;
    }
}
