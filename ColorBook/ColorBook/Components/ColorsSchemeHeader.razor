@inject IJSRuntime JS

<div class="colors-scheme-header__wrapper">

    <h3 class="colors-scheme-header__title">COLORS SCHEME</h3>

    <div class="colors-scheme-header__schemes-wrapper">

        <button class="@cssButton" @onclick="ChangeListVisibility" title="generate color scheme">
            <img src="/assets/color-wheel-icon.svg" />
        </button>

        @if (isListVisible)
        {
            <ul class="colors-scheme-header__list">

                <li class="colors-scheme-header__list-item colors-scheme-header__list-item--info ">
                    Based on
                    <div class="colors-scheme-header__color-sample" style="background-color: @ColorHex"></div>
                    generate colors:
                </li>

                @foreach (var scheme in schemes)
                {
                    <li class="colors-scheme-header__list-item colors-scheme-header__list-item--selectable" @onclick="()=>GenerateScheme(scheme.Method)">
                        @scheme.Name
                    </li>
                }
            </ul>
        }
    </div>

</div>

@code {
    [Parameter]
    public string ColorHex { get; set; }
    [Parameter]
    public Action<string[]> AddGeneratedColors { get; set; }

    SchemeType[] schemes;

    bool isListVisible;

    string cssButton => isListVisible ? "colors-scheme-header__button colors-scheme-header__button--list" : "colors-scheme-header__button";

    protected override async Task OnInitializedAsync()
    {
        schemes = await JS.InvokeAsync<SchemeType[]>("ColorLib.getSchemeTypes");
    }

    void ChangeListVisibility() => isListVisible = !isListVisible;

    async Task GenerateScheme(string method)
    {
        var colors = await JS.InvokeAsync<string[]>("ColorLib.generateScheme", ColorHex, method);
        AddGeneratedColors?.Invoke(colors);
        isListVisible = false;
    }
}
