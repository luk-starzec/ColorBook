@using System.ComponentModel.DataAnnotations

<div class="sync-info__wrapper">

    <h4 class="sync-info__header">
        Server
    </h4>

    <div class="sync-info__server-wrapper">

        <div class="@cssServerIcon"></div>

        <div class="@cssServerStatus">@serverStatus</div>

    </div>

    <h4 class="sync-info__header">
        User
    </h4>

    @if (IsLogedIn)
    {
        <div class="sync-info__user-name">
            @UserName
        </div>

        <button class="sync-info__login-button" @onclick="()=>user.LogOut()">
            log out
        </button>
    }
    else
    {
        <EditForm class="sync-info__user-wrapper" Model="@user" OnSubmit="OnUserSubmited">
            <DataAnnotationsValidator />

            <label class="sync-info__text-label">
                Login:
                <InputText @bind-Value="user.Login" />
            </label>
            <ValidationMessage  For="() => user.Login" />

            <label class="sync-info__text-label">
                Password:
                <InputPassword @bind-Password="user.Password" />
            </label>
            <ValidationMessage For="() => user.Password" />

            <label class="sync-info__check-label">
                <InputCheckbox @bind-Value="user.StayLoggedId" />
                stay logged in
            </label>

            <input type="submit" class="sync-info__login-button" value="log in" />

        </EditForm>
    }

</div>

@code {
    [Parameter]
    public bool IsServerAvailable { get; set; }
    [Parameter]
    public EventCallback<bool> IsServerAvailableChanged { get; set; }

    [Parameter]
    public bool IsLogedIn
    {
        get => user.IsLoggedId;
        set
        {
            if (user.IsLoggedId == value)
                return;
            user.IsLoggedId = value;
            IsLogedInChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<bool> IsLogedInChanged { get; set; }

    [Parameter]
    public string UserName
    {
        get => user.Login;
        set => user.Login = value;
    }
    [Parameter]
    public EventCallback<string> UserNameChanged { get; set; }

    SyncUser user = new SyncUser();

    bool isSyncActive => IsServerAvailable && IsLogedIn;
    string serverStatus => IsServerAvailable ? "online" : "offline";

    string cssServerIcon => IsServerAvailable ? "sync-info__server-icon sync-info__server-icon--online" : "sync-info__server-icon";
    string cssServerStatus => IsServerAvailable ? "sync-info__server-status sync-info__server-status--online" : "sync-info__server-status";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("init");
        await CheckServerAvailability();
    }


    async Task CheckServerAvailability()
    {
        var isAvailable = new Random().Next(0, 2) != 0;

        IsServerAvailable = isAvailable;
        await IsServerAvailableChanged.InvokeAsync(IsServerAvailable);

        Console.WriteLine($"server: {serverStatus}");
    }

    public class SyncUser
    {
        [Required]
        public string Login { get; set; }
        [Required]
        public string Password { get; set; }
        public bool StayLoggedId { get; set; }

        public bool IsLoggedId { get; set; }

        public void LogOut()
        {
            IsLoggedId = false;
            Password = null;
        }
    }

    void OnUserSubmited(EditContext editContext)
    {
        bool isValid = editContext.Validate();
        var model = editContext.Model as SyncUser;

        model.IsLoggedId = isValid;

        Console.WriteLine(model);
    }
}
