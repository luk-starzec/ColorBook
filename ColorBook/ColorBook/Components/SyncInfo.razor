@using System.ComponentModel.DataAnnotations
@inject ISyncService syncService

<div class="sync-info__wrapper">

    <h4 class="sync-info__header">
        Server
    </h4>

    <div class="sync-info__server-wrapper">

        <div class="@cssServerIcon"></div>

        <div class="@cssServerStatus">@serverStatus</div>

    </div>

    <h4 class="sync-info__header">
        User
    </h4>

    @if (isLoggedIn)
    {
        <div class="sync-info__user-name">
            @user.Login
        </div>

        <button class="sync-info__login-button" @onclick="LogOut">
            log out
        </button>
    }
    else
    {
        <EditForm class="sync-info__user-wrapper" Model="@user" OnValidSubmit="OnUserSubmit">
            <DataAnnotationsValidator />

            <div class="@cssDisabledMask">
            </div>

            <label class="sync-info__text-label">
                Login:
                <InputText @bind-Value="user.Login" />
            </label>
            <ValidationMessage For="() => user.Login" />

            <label class="sync-info__text-label">
                Password:
                <InputPassword @bind-Password="user.Password" />
            </label>
            <ValidationMessage For="() => user.Password" />

            <label class="sync-info__check-label">
                <InputCheckbox @bind-Value="user.StayLoggedId" />
                stay logged in
            </label>

            @if (invalidUser)
            {
                <div class="validation-message">
                    invalid login or password
                </div>
            }

            <input type="submit" class="sync-info__login-button" value="log in" />

        </EditForm>
    }

</div>

@code {
    bool isServerAvailable;

    UserFormModel user = new UserFormModel();
    public bool isLoggedIn;
    bool invalidUser = false;

    string serverStatus => isServerAvailable ? "online" : "offline";
    string cssServerIcon => isServerAvailable ? "sync-info__server-icon sync-info__server-icon--online" : "sync-info__server-icon";
    string cssServerStatus => isServerAvailable ? "sync-info__server-status sync-info__server-status--online" : "sync-info__server-status";

    string cssDisabledMask => isServerAvailable ? "sync-info__disabled-mask" : "sync-info__disabled-mask sync-info__disabled-mask--visible";

    protected override async Task OnInitializedAsync()
    {
        isServerAvailable = await syncService.GetServerAvailabilityAsync();
        isLoggedIn = await syncService.GetIsLoggedInAsync();

        if (isLoggedIn)
            user.Login = syncService.GetLoggedUser().Login;
        else
            user.Login = await syncService.GetLastUserNameAsync();
    }

    async Task OnUserSubmit(EditContext editContext)
    {
        var model = editContext.Model as UserFormModel;
        await LogIn(model.StayLoggedId);
    }

    async Task LogIn(bool stayLoggedId)
    {
        isLoggedIn = await syncService.LogInAsync(new User(user.Login, user.Password), stayLoggedId);
        invalidUser = !isLoggedIn;
    }

    async Task LogOut()
    {
        await syncService.LogOutAsync();
        isLoggedIn = false;
        user.Password = null;
    }


    public class UserFormModel
    {
        [Required]
        public string Login { get; set; }
        [Required]
        public string Password { get; set; }
        public bool StayLoggedId { get; set; }
    }
}
