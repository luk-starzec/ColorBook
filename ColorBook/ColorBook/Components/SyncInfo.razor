@using System.ComponentModel.DataAnnotations
@inject ISyncService syncService

<div class="sync-info__wrapper">

    <h4 class="sync-info__header">
        Server
    </h4>

    <div class="sync-info__server-wrapper">

        <div class="@cssServerIcon"></div>

        <div class="@cssServerStatus">@serverStatus</div>

    </div>

    <h4 class="sync-info__header">
        User
    </h4>

    @if (IsLoggedIn)
    {
        <div class="sync-info__user-name">
            @userModel.Login
        </div>

        <button class="sync-info__login-button" @onclick="LogOut">
            log out
        </button>
    }
    else
    {
        <EditForm class="sync-info__user-wrapper" Model="@userModel" OnSubmit="OnUserSubmit">
            <DataAnnotationsValidator />

            <div class="@cssDisabledMask">
            </div>

            <label class="sync-info__text-label">
                Login:
                <InputText @bind-Value="userModel.Login" />
            </label>
            <ValidationMessage For="() => userModel.Login" />

            <label class="sync-info__text-label">
                Password:
                <InputPassword @bind-Password="userModel.Password" />
            </label>
            <ValidationMessage For="() => userModel.Password" />

            <label class="sync-info__check-label">
                <InputCheckbox @bind-Value="userModel.StayLoggedId" />
                stay logged in
            </label>

            @if (loginError)
            {
                <div class="validation-message">
                    invalid login or password
                </div>
            }

            <input type="submit" class="sync-info__login-button" value="log in" />

        </EditForm>
    }

</div>

@code {
    [Parameter]
    public bool IsServerAvailable { get; set; }
    [Parameter]
    public EventCallback<bool> IsServerAvailableChanged { get; set; }

    [Parameter]
    public bool IsLoggedIn { get; set; }
    [Parameter]
    public EventCallback<bool> IsLoggedInChanged { get; set; }

    UserModel userModel = new UserModel();

    bool loginError = false;

    string serverStatus => IsServerAvailable ? "online" : "offline";
    string cssServerIcon => IsServerAvailable ? "sync-info__server-icon sync-info__server-icon--online" : "sync-info__server-icon";
    string cssServerStatus => IsServerAvailable ? "sync-info__server-status sync-info__server-status--online" : "sync-info__server-status";

    string cssDisabledMask => IsServerAvailable ? "sync-info__disabled-mask" : "sync-info__disabled-mask sync-info__disabled-mask--visible";

    protected override async Task OnInitializedAsync()
    {
        await CheckServerAvailability();
        userModel.Login = await syncService.GetLastUserNameAsync();
    }


    async Task CheckServerAvailability()
    {
        IsServerAvailable = await syncService.CheckServerAvailabilityAsync();
        await IsServerAvailableChanged.InvokeAsync(IsServerAvailable);

        Console.WriteLine($"server: {serverStatus}");
    }

    async Task OnUserSubmit(EditContext editContext)
    {
        bool isValid = editContext.Validate();
        var model = editContext.Model as UserModel;

        if (isValid)
            await LogIn(model.StayLoggedId);
        else
            IsLoggedIn = false;
        await IsLoggedInChanged.InvokeAsync(IsLoggedIn);
    }

    async Task LogIn(bool stayLoggedId)
    {
        var user = new User(userModel.Login, userModel.Password);
        IsLoggedIn = await syncService.LogInAsync(user, stayLoggedId);
        loginError = !IsLoggedIn;
    }

    async Task LogOut()
    {
        syncService.LogOut();

        IsLoggedIn = false;
        await IsLoggedInChanged.InvokeAsync(IsLoggedIn);

        userModel.Password = null;
    }


    public class UserModel
    {
        [Required]
        public string Login { get; set; }
        [Required]
        public string Password { get; set; }
        public bool StayLoggedId { get; set; }
    }
}
