@inject IJSRuntime JS

<div class="input-hsl__wrapper">

    <label class="input-hsl__label">
        <span>HSL:</span> 
        <input type="number" @bind="@H" @bind:event="oninput" min="0" max="359" class="input-hsl__input" />
        <input type="number" @bind="@S" @bind:event="oninput" min="0" max="100" class="input-hsl__input input-hsl__input--no-side-border" />
        <input type="number" @bind="@L" @bind:event="oninput" min="0" max="100" class="input-hsl__input" />
    </label>
    <ButtonCopy Text="@hsl" />

</div>


@code {
    [Parameter]
    public string Value { get; set; }
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    int h;
    private int H
    {
        get => h;
        set { h = value; InvokeAsync(SetValue); }
    }
    int s;
    private int S
    {
        get => s;
        set { s = value; InvokeAsync(SetValue); }
    }
    int l;
    private int L
    {
        get => l;
        set { l = value; InvokeAsync(SetValue); }
    }

    string hsl => $"hsl({H},{S}%,{L}%)";


    protected override async Task OnParametersSetAsync()
    {
        await SetHSL();
    }


    private async Task SetValue()
    {
        var newColor = await JS.InvokeAsync<string>("ColorLib.hslToHex", H, S, L);
        if (Value != newColor)
        {
            Value = newColor;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task SetHSL()
    {
        var currentColor = await JS.InvokeAsync<string>("ColorLib.hslToHex", H, S, L);
        if (Value != currentColor)
        {
            h = await JS.InvokeAsync<int>("ColorLib.getHue", Value);
            s = await JS.InvokeAsync<int>("ColorLib.getSaturation", Value);
            l = await JS.InvokeAsync<int>("ColorLib.getLightness", Value);
        }
    }
}
