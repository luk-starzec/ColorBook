@using BlazorColorPicker
@inject ISettingsService settingsService;
@inject ISchemeService schemeService;
@inject IJSRuntime JS
@inject ISyncService syncService;

<div class="@cssWrapper">

    <div class="side-bar__header">

        <img class="side-bar__logo" src="/assets/logo-icon.svg" />

        <h3 class="@cssTitle">ColorBook</h3>

        @if (isCollapsed)
        {
            <button class="side-bar__menu-button" @onclick="ShowMenu">
                <img src="/assets/menu-icon.svg" />
            </button>
        }
        else
        {
            <button class="side-bar__close-button" @onclick="HideMenu">
                <SvgIcon SvgUrl="/assets/close-icon.svg" />
            </button>
        }
    </div>

    @if (!isCollapsed)
    {
        <ul class="side-bar__list">

            <li class="@cssListItem side-bar__list-item--action" @onclick="CreateScheme">
                <img src="/assets/create-scheme-icon.svg" title="create scheme" />
                <span>
                    Create scheme
                </span>
            </li>

            <li class="@cssListItem side-bar__list-item--action" @onclick="DuplicateScheme">
                <img src="/assets/copy-scheme-icon.svg" title="duplicate scheme" />
                <span>
                    Duplicate scheme
                </span>
            </li>

            <li class="@cssLoadScheme">
                <img src="/assets/load-scheme-icon.svg" title="load scheme" />
                <span>
                    Load scheme
                </span>
                <div class="side-bar__down-icon">
                    <SvgIcon SvgUrl="/assets/dropdown-icon.svg" />
                </div>
                <ul class="side-bar__sublist">
                    <li class="side-bar__sublist-item side-bar__sublist-item--no-padding">
                        <label class="side-bar__file-label">
                            <span>from file</span>...
                            <InputFile class="side-bar__file-input" OnChange="LoadSchemeFromFile" accept="application/JSON" />
                        </label>

                    </li>
                    <li class="side-bar__sublist-item" @onclick="ChangeLibraryVisibility">
                        <span>
                            from library
                        </span>
                        <div class="@cssLibraryIcon">
                            <SvgIcon SvgUrl="/assets/dropdown-icon.svg" />
                        </div>
                    </li>
                </ul>
            </li>

            <li class="side-bar__list-item side-bar__list-item--blank"></li>

            <li class="@cssListItem side-bar__list-item--action" @onclick="ChangeSyncVisibility">
                <img class="@cssSyncState" src="/assets/sync-icon.svg" />
                <span>
                    Data sync
                </span>
                <div class="@cssSyncIcon">
                    <SvgIcon SvgUrl="/assets/dropdown-icon.svg" />
                </div>
            </li>

            <li class="@cssListItem side-bar__list-item--action" @onclick="ChangeSettingsVisibility">
                <img src="/assets/settings-icon.svg" />
                <span>
                    Settings
                </span>
                <div class="@cssSettingsIcon">
                    <SvgIcon SvgUrl="/assets/dropdown-icon.svg" />
                </div>
            </li>

        </ul>

    }

    <div class="@cssSubMenu">

        @if (!isLibraryCollapsed)
        {
            <div class="side-bar__library-wrapper">

                <h4 class="side-bar__sub-header">
                    Schemes library
                </h4>

                @if (isLibraryLoaded)
                {
                    <ul class="side-bar__library-list">
                        @foreach (var scheme in library)
                        {
                            <li class="side-bar__library-list-item" @key="scheme.Id" @onclick="()=>LoadSchemeFromLibrary(scheme.Id)">
                                @scheme.Name
                            </li>
                        }
                    </ul>
                }

            </div>
        }

        @if (!isSyncCollapsed)
        {
            <SyncInfo />
        }

        @if (!isSettingsCollapsed)
        {
            <div class="side-bar__settings-wrapper">

                <h4 class="side-bar__sub-header">
                    Background sample
                </h4>

                <SettingsColor SettingsColorType="@EnumSettingsColorType.LightBackground"
                               Label="light:" ColorHex="@currentSettings.LightBackgroundColor" ColorPickerOpened="OpenColorPicker" />
                <SettingsColor SettingsColorType="@EnumSettingsColorType.DarkBackground"
                               Label="dark:" ColorHex="@currentSettings.DarkBackgroundColor" ColorPickerOpened="OpenColorPicker" />

                <h4 class="side-bar__sub-header">
                    Text sample
                </h4>

                <SettingsColor SettingsColorType="@EnumSettingsColorType.LightText"
                               Label="light:" ColorHex="@currentSettings.LightTextColor" ColorPickerOpened="OpenColorPicker" />
                <SettingsColor SettingsColorType="@EnumSettingsColorType.DarkText"
                               Label="dark:" ColorHex="@currentSettings.DarkTextColor" ColorPickerOpened="OpenColorPicker" />

                <button class="side-bar__restore-button" @onclick="RestoreDefaults">
                    <img src="/assets/restore-icon.svg" />
                    Restore defaults
                </button>
            </div>
        }

    </div>

</div>

<ColorPicker Title="Choose color" IsOpened="isColorPickerOpened" Closed="ClosedColorPicker" MyColor="@colorPickerColor" />

<div class="@cssMask" @onclick="HideMenu"></div>

@code {
    [Parameter]
    public ColorScheme CurrentScheme { get; set; }
    [Parameter]
    public EventCallback<ColorScheme> OnSchemeLoad { get; set; }

    Settings currentSettings;
    ColorScheme[] library = null;
    bool isLibraryLoaded => library != null;

    bool isSyncActive;

    bool isCollapsed = true;
    bool isLibraryCollapsed = true;
    bool isSyncCollapsed = true;
    bool isSettingsCollapsed = true;
    bool isSecondLevelCollapsed => isLibraryCollapsed && isSyncCollapsed && isSettingsCollapsed;

    string cssWrapper => isCollapsed ? "side-bar__wrapper side-bar__wrapper--collapsed" :
        isSecondLevelCollapsed ? "side-bar__wrapper" : "side-bar__wrapper side-bar__wrapper--small";

    string cssMask => isCollapsed ? "side-bar__mask" : "side-bar__mask side-bar__mask--visible";

    string cssTitle => isSecondLevelCollapsed ? "side-bar__title" : "side-bar__title side-bar__title--small";

    string cssLoadScheme => isLibraryCollapsed ? cssListItem : $"{cssListItem} side-bar__list-item--hover";

    string cssSubMenu => isCollapsed ? "side-bar__submenu-wrapper--hidden" :
        isSecondLevelCollapsed ? "side-bar__submenu-wrapper side-bar__submenu-wrapper--collapsed" : "side-bar__submenu-wrapper";

    string cssListItem => isSecondLevelCollapsed ? "side-bar__list-item" : "side-bar__list-item side-bar__list-item--small";

    string cssLibraryIcon => isLibraryCollapsed ? "side-bar__right-icon" : "side-bar__right-icon side-bar__right-icon--opened";

    string cssSyncState => isSyncActive ? "side-bar__sync-state side-bar__sync-state--active" : "side-bar__sync-state";
    string cssSyncIcon => isSyncCollapsed ? "side-bar__right-icon" : "side-bar__right-icon side-bar__right-icon--opened";

    string cssSettingsIcon => isSettingsCollapsed ? "side-bar__right-icon" : "side-bar__right-icon side-bar__right-icon--opened";


    protected override async Task OnInitializedAsync()
    {
        currentSettings = await settingsService.GetCurrentSettingsAsync();
        settingsService.CurrentSettingsChanged += SetCurrentSettings;
        isSyncActive = await syncService.GetSyncAvailabilityAsync();
        syncService.SyncAvailabilityChanged += SetIsSyncActive;
    }

    void SetIsSyncActive(bool isActive)
    {
        isSyncActive = isActive;
        StateHasChanged();
    }

    void SetCurrentSettings(Settings newSettings)
    {
        currentSettings = newSettings;
        StateHasChanged();
    }

    async Task CreateScheme()
    {
        var scheme = schemeService.GetEmptyScheme();
        await LoadScheme(scheme);
    }

    async Task DuplicateScheme()
    {
        var scheme = schemeService.DuplicateScheme(CurrentScheme);
        await LoadScheme(scheme);
    }

    async Task LoadSchemeFromFile(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var buffers = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffers);
        var stringData = System.Text.Encoding.UTF8.GetString(buffers);
        var scheme = schemeService.JsonToScheme(stringData);
        await LoadScheme(scheme);
    }

    async Task LoadSchemeFromLibrary(Guid id)
    {
        var scheme = library.Single(r => r.Id == id);
        await LoadScheme(scheme);
    }

    async Task LoadScheme(ColorScheme scheme)
    {
        await OnSchemeLoad.InvokeAsync(scheme);
        HideMenu();
    }

    void ShowMenu()
    {
        isCollapsed = false;
    }

    void HideMenu()
    {
        isLibraryCollapsed = true;
        isSettingsCollapsed = true;
        isCollapsed = true;
        library = null;
    }

    async Task ChangeLibraryVisibility()
    {
        isLibraryCollapsed = !isLibraryCollapsed;
        if (!isLibraryCollapsed)
        {
            if (!isLibraryLoaded)
                await LoadLibrary();
            isSyncCollapsed = true;
            isSettingsCollapsed = true;
        }
    }

    void ChangeSyncVisibility()
    {
        isSyncCollapsed = !isSyncCollapsed;
        if (!isSyncCollapsed)
        {
            isLibraryCollapsed = true;
            isSettingsCollapsed = true;
        }

    }
    void ChangeSettingsVisibility()
    {
        isSettingsCollapsed = !isSettingsCollapsed;
        if (!isSettingsCollapsed)
        {
            isLibraryCollapsed = true;
            isSyncCollapsed = true;
        }
    }

    async Task LoadLibrary()
    {
        library = (await schemeService.LibraryList())
            .OrderByDescending(r => r.LastUpdate)
            .ToArray();
    }

    async Task RestoreDefaults()
    {
        await settingsService.RestoreDefaultSettings();
        currentSettings = await settingsService.GetCurrentSettingsAsync();
    }


    bool isColorPickerOpened = false;
    string colorPickerColor;
    EnumSettingsColorType settingsColorType;

    void OpenColorPicker(EnumSettingsColorType colorType)
    {
        settingsColorType = colorType;
        colorPickerColor = GetSettingsColor(colorType);
        isColorPickerOpened = true;
    }

    async Task ClosedColorPicker(string value)
    {
        SetSettingsColor(settingsColorType, value);
        isColorPickerOpened = false;
        await settingsService.SaveSettingsAsync(currentSettings);
    }

    string GetSettingsColor(EnumSettingsColorType settingsColorType)
    {
        return settingsColorType switch
        {
            EnumSettingsColorType.LightBackground => currentSettings.LightBackgroundColor,
            EnumSettingsColorType.DarkBackground => currentSettings.DarkBackgroundColor,
            EnumSettingsColorType.LightText => currentSettings.LightTextColor,
            EnumSettingsColorType.DarkText => currentSettings.DarkTextColor,
            _ => string.Empty,
        };
    }
    void SetSettingsColor(EnumSettingsColorType settingsColorType, string color)
    {
        switch (settingsColorType)
        {
            case EnumSettingsColorType.LightBackground:
                currentSettings.LightBackgroundColor = color;
                break;
            case EnumSettingsColorType.DarkBackground:
                currentSettings.DarkBackgroundColor = color;
                break;
            case EnumSettingsColorType.LightText:
                currentSettings.LightTextColor = color;
                break;
            case EnumSettingsColorType.DarkText:
                currentSettings.DarkTextColor = color;
                break;
            default:
                break;
        }
    }
}
