@using BlazorColorPicker
@inject ISettingsService settingsService

<div class="color-info__wrapper">
    @if (isDisabled)
    {
        <div class="color-info__disabled-info">
            <img src="/assets/dropdown-icon.svg" />
            select color from scheme
            <img src="/assets/dropdown-icon.svg" />
        </div>
    }
    else
    {
        <div class="@cssBasicView">

            <ColorSelection />

            <button class="@cssColorViewer" style="@styleSampleColor" title="choose different color" @onclick="ShowColorPicker">
                <div class="color-info__color-change">...</div>
            </button>

            <InputHex @bind-Value="ColorHex" IsLabelHidden="@(!isFullView)" IsBold="@isFullView" />

            <button class="@cssButtonDetalis" @onclick="ChangeView" title="show/hide color details">
                <img src="/assets/dropdown-icon.svg" />
            </button>

        </div>

        @if (isFullView)
        {
            <div class="color-info__full-view">

                <button class="color-info__color-big-sample" style="@styleSampleColor" title="choose different color" @onclick="ShowColorPicker">
                    <div class="color-info__color-change">...</div>
                </button>

                <InputRGB @bind-Value="ColorHex" />
                <InputHSL @bind-Value="ColorHex" />
                <InputName Value="@ColorHex" />

            </div>

            <ColorBar @bind-ColorHex="@ColorHex" ColorBarType="@EnumColorBarType.Lightness" />
            <ColorBar @bind-ColorHex="@ColorHex" ColorBarType="@EnumColorBarType.Saturation" />
            <ColorBar @bind-ColorHex="@ColorHex" ColorBarType="@EnumColorBarType.Hue" />

            <div class="color-info__color-fit">

                <ColorFitText TextColor="@ColorHex" BackgroundColor="@settings.DarkBackgroundColor" />
                <ColorFitText TextColor="@ColorHex" BackgroundColor="@settings.LightBackgroundColor" />
                <ColorFitText TextColor="@settings.DarkTextColor" BackgroundColor="@ColorHex" />
                <ColorFitText TextColor="@settings.LightTextColor" BackgroundColor="@ColorHex" />
                <ColorFitBorder BorderColor="@ColorHex" BackgroundColor="@settings.DarkBackgroundColor" />
                <ColorFitBorder BorderColor="@ColorHex" BackgroundColor="@settings.LightBackgroundColor" />

            </div>
        }

    }

    <ColorPicker Title="Choose color" IsOpened="isColorPickerOpened" Closed="ClosedColorPicker" MyColor="@ColorHex" />

</div>

@code {
    string colorHex;
    [Parameter]
    public string ColorHex
    {
        get => colorHex;
        set
        {
            if (colorHex == value)
                return;
            colorHex = value;
            ColorHexChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<string> ColorHexChanged { get; set; }

    Settings settings;

    bool isDisabled => string.IsNullOrEmpty(ColorHex);

    bool isFullView = false;

    string cssBasicView => isFullView ? "color-info__basic-view color-info__basic-view--full" : "color-info__basic-view";
    string cssColorViewer => isFullView ? "color-info__color-sample color-info__color-sample--hidden" : "color-info__color-sample";
    string cssButtonDetalis => isFullView ? "color-info__switch-view color-info__switch-view--full" : "color-info__switch-view";
    string styleSampleColor => $"background-color: {ColorHex};";


    protected override async Task OnInitializedAsync()
    {
        settings = await settingsService.GetCurrentSettingsAsync();
    }


    void ChangeView() => isFullView = !isFullView;


    bool isColorPickerOpened = false;

    void ShowColorPicker()
    {
        isColorPickerOpened = true;
    }

    void ClosedColorPicker(string value)
    {
        ColorHex = value;
        isColorPickerOpened = false;
    }
}
