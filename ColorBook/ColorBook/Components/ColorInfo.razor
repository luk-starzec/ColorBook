@using BlazorColorPicker
@inject ISettingsService settingsService

<section class="color-info__wrapper">

    @if (isDisabled)
    {
        <div class="color-info__disabled-info">
            <img src="/assets/dropdown-icon.svg" />
            select color from scheme
            <img src="/assets/dropdown-icon.svg" />
        </div>
    }

    <div class="@cssContent">

        @if (isImagePreview)
        {
            <section class="color-info__image-section">

                <ImagePreview @ref="imagePreviewRef" @bind-ColorHex="ColorHex" File="previewFile" />

            </section>
        }

        <section class="color-info__color-section">

            <ColorSelection @bind-SelectedFile="previewFile" @bind-ColorSelectionType="colorSelectionType" />

            <div class="@cssView">

                <button class="@cssButtonDetalis" @onclick="ChangeView" title="show/hide color details">
                    <img src="/assets/dropdown-icon.svg" />
                </button>

                <button class="@cssColorViewer" style="@styleSampleColor" title="choose different color" @onclick="ShowColorPicker">
                    <div class="color-info__color-change">...</div>
                </button>

                <InputHex @bind-Value="ColorHex" IsLabelHidden="@(!isFullView)" IsBold="@isFullView" />

                @if (!isDisabled && isFullView)
                {

                    <button class="color-info__color-big-sample" style="@styleSampleColor" title="choose different color" @onclick="ShowColorPicker">
                        <div class="color-info__color-change">...</div>
                    </button>

                    <InputRGB @bind-Value="ColorHex" />
                    <InputHSL @bind-Value="ColorHex" />
                    <InputName Value="@ColorHex" />

                    <div class="color-info__color-bars">

                        <ColorBar @bind-ColorHex="@ColorHex" ColorBarType="@EnumColorBarType.Lightness" />
                        <ColorBar @bind-ColorHex="@ColorHex" ColorBarType="@EnumColorBarType.Saturation" />
                        <ColorBar @bind-ColorHex="@ColorHex" ColorBarType="@EnumColorBarType.Hue" />

                    </div>

                    <div class="color-info__color-fit">

                        <div class="color-info__color-fit-group">

                            <ColorFitText TextColor="@ColorHex" BackgroundColor="@settings.DarkBackgroundColor" />
                            <ColorFitText TextColor="@ColorHex" BackgroundColor="@settings.LightBackgroundColor" />
                            <ColorFitText TextColor="@settings.DarkTextColor" BackgroundColor="@ColorHex" />
                            <ColorFitText TextColor="@settings.LightTextColor" BackgroundColor="@ColorHex" />

                        </div>

                        <div class="color-info__color-fit-group">

                            <ColorFitBorder BorderColor="@ColorHex" BackgroundColor="@settings.DarkBackgroundColor" />
                            <ColorFitBorder BorderColor="@ColorHex" BackgroundColor="@settings.LightBackgroundColor" />

                        </div>

                    </div>
                }

            </div>

        </section>


    </div>

    <ColorPicker Title="Choose color" IsOpened="isColorPickerOpened" Closed="ClosedColorPicker" MyColor="@ColorHex" />

</section>

@code {
    string colorHex;
    [Parameter]
    public string ColorHex
    {
        get => colorHex;
        set
        {
            if (colorHex == value)
                return;
            colorHex = value;
            ColorHexChanged.InvokeAsync(value);
        }
    }
    [Parameter]
    public EventCallback<string> ColorHexChanged { get; set; }

    ImagePreview imagePreviewRef;

    Settings settings;

    bool isDisabled => string.IsNullOrEmpty(ColorHex);

    bool isFullView = false;

    string cssContent => isDisabled ? "color-info__content color-info__content--hidden" : "color-info__content";
    string cssView => isFullView ? "color-info__view color-info__view--full" : "color-info__view";
    string cssColorViewer => isFullView ? "color-info__color-sample color-info__color-sample--hidden" : "color-info__color-sample";
    string cssButtonDetalis => isFullView ? "color-info__switch-view color-info__switch-view--full" : "color-info__switch-view";
    string styleSampleColor => $"background-color: {ColorHex};";

    IBrowserFile previewFile = null;
    EnumColorSelectionType colorSelectionType = EnumColorSelectionType.Palette;

    bool isImagePreview => previewFile != null;

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
    }

    async Task LoadSettings() => settings = await settingsService.GetCurrentSettingsAsync();

    async Task ChangeView()
    {
        isFullView = !isFullView;
        if (isFullView)
            await LoadSettings();
    }

    bool isColorPickerOpened = false;

    void ShowColorPicker()
    {
        isColorPickerOpened = true;
    }

    void ClosedColorPicker(string value)
    {
        ColorHex = value;
        isColorPickerOpened = false;
    }
}
